# Workflow 이름
name: Spring Boot & Gradle CI/CD

# 어떤 이벤트가 발생하면 workflow 실행할 지 명시
on:
  # develop 브랜치에 push나 pull request 발생 시
  push:
    branches: [ "develop" ]
#  pull_request:
#    branches: [ "develop" ]

# 위 이벤트 발생 시 실행될 작업들
jobs:
  build:
    # VM의 실행 환경 지정 => 우분투 최신 버전
    runs-on: ubuntu-latest

    # 실행될 jobs를 순서대로 명시
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # JDK 17 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'  # Java 버전 변경
          distribution: 'temurin'  # Java 배포판 추가

      # Gradle Build를 위한 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Docker 네트워크 생성
      - name: Create Docker Network
        run: docker network create my-network || true

      # redis 시작
      - name: Start Redis
        run: |
          docker run --name redis --network my-network -d -p 6379:6379 redis:latest

      # Gradle Build (test 제외)
      - name: Build with Gradle
        run: ./gradlew clean build --exclude-task test

      # DockerHub 로그인
      - name: DockerHub Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # Docker 이미지 빌드
      - name: Docker Image Build
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }} .

      # DockerHub Push
      - name: DockerHub Push
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}

      # EC2 인스턴스 접속 및 애플리케이션 실행
      - name: Application Run
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          port: 22

          script: |
            # 사용자 정의 네트워크 생성
            sudo docker network create my-network || true
            
            # 이전 컨테이너 종료 및 삭제
            sudo docker kill ${{ secrets.PROJECT_NAME }} || true
            sudo docker rm -f ${{ secrets.PROJECT_NAME }} || true
            sudo docker rmi ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }} || true
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}
            
            # Redis 컨테이너 실행
            sudo docker run -d --name redis --network my-network -p 6379:6379 redis:latest
            
            # 애플리케이션 컨테이너 실행
            sudo docker run -p ${{ secrets.PORT }}:${{ secrets.PORT }} \
            --name ${{ secrets.PROJECT_NAME }} \
            --network my-network \
            -e AWS_S3_AK=${{ secrets.AWS_S3_AK }} \
            -e AWS_S3_SK=${{ secrets.AWS_S3_SK }} \
            -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -e DB_URL=${{ secrets.DB_URL }} \
            -e DB_USERNAME=${{ secrets.DB_USERNAME }} \
            -e GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }} \
            -e GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }} \
            -e IMP_KEY=${{ secrets.IMP_KEY }} \
            -e IMP_SECRET=${{ secrets.IMP_SECRET }} \
            -e REDIS_HOST=redis \
            -d ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}
